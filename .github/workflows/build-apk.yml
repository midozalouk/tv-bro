name: Build Android APK

on:
  push:
    branches: [ master, main, develop, genspark_ai_developer ]
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build Type'
        required: true
        default: 'debug'
        type: choice
        options:
          - debug
          - release
      flavor:
        description: 'Build Flavor'
        required: true
        default: 'generic'
        type: choice
        options:
          - generic
          - google
          - foss

jobs:
  build:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        flavor: [generic, google, foss]
        build_type: [debug, release]
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Java JDK
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: gradle

    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      with:
        api-level: 34
        build-tools: 34.0.0
        cmake-version: 3.22.1
        ndk-version: 25.2.9519653

    - name: Cache Gradle Dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
          ~/.android/build-cache
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Make Gradle Wrapper Executable
      run: chmod +x ./gradlew

    - name: Check Gradle Version
      run: ./gradlew --version

    - name: Clean Project
      run: ./gradlew clean

    - name: Create local.properties (Optional)
      run: |
        echo "# Auto-generated local.properties for CI/CD" > local.properties
        echo "sdk.dir=$ANDROID_HOME" >> local.properties

    - name: Build Debug APK (Generic)
      if: matrix.build_type == 'debug' && matrix.flavor == 'generic'
      run: ./gradlew assembleGenericDebug

    - name: Build Debug APK (Google)
      if: matrix.build_type == 'debug' && matrix.flavor == 'google'
      run: ./gradlew assembleGoogleDebug

    - name: Build Debug APK (FOSS)
      if: matrix.build_type == 'debug' && matrix.flavor == 'foss'
      run: ./gradlew assembleFossDebug

    - name: Build Release APK (Generic)
      if: matrix.build_type == 'release' && matrix.flavor == 'generic'
      run: ./gradlew assembleGenericRelease

    - name: Build Release APK (Google)
      if: matrix.build_type == 'release' && matrix.flavor == 'google'
      run: ./gradlew assembleGoogleRelease

    - name: Build Release APK (FOSS)
      if: matrix.build_type == 'release' && matrix.flavor == 'foss'
      run: ./gradlew assembleFossRelease

    - name: List Generated APKs
      run: |
        echo "Generated APK files:"
        find app/build/outputs/apk -name "*.apk" -type f -exec ls -la {} \;

    - name: Upload Debug APK Artifacts
      if: matrix.build_type == 'debug'
      uses: actions/upload-artifact@v4
      with:
        name: tv-bro-${{ matrix.flavor }}-debug-apk
        path: |
          app/build/outputs/apk/${{ matrix.flavor }}/debug/*.apk
        retention-days: 30

    - name: Upload Release APK Artifacts
      if: matrix.build_type == 'release'
      uses: actions/upload-artifact@v4
      with:
        name: tv-bro-${{ matrix.flavor }}-release-apk
        path: |
          app/build/outputs/apk/${{ matrix.flavor }}/release/*.apk
        retention-days: 90

  # Job for building all variants at once (when manually triggered)
  build-all-variants:
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Java JDK
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: gradle

    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      with:
        api-level: 34
        build-tools: 34.0.0
        cmake-version: 3.22.1
        ndk-version: 25.2.9519653

    - name: Cache Gradle Dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
          ~/.android/build-cache
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Make Gradle Wrapper Executable
      run: chmod +x ./gradlew

    - name: Create local.properties
      run: |
        echo "# Auto-generated local.properties for CI/CD" > local.properties
        echo "sdk.dir=$ANDROID_HOME" >> local.properties

    - name: Build Specified Variant
      run: |
        if [ "${{ github.event.inputs.build_type }}" = "debug" ]; then
          ./gradlew assemble${{ github.event.inputs.flavor }}Debug
        else
          ./gradlew assemble${{ github.event.inputs.flavor }}Release
        fi

    - name: List Generated APKs
      run: |
        echo "Generated APK files:"
        find app/build/outputs/apk -name "*.apk" -type f -exec ls -la {} \;

    - name: Upload Manual Build APK
      uses: actions/upload-artifact@v4
      with:
        name: tv-bro-${{ github.event.inputs.flavor }}-${{ github.event.inputs.build_type }}-manual
        path: |
          app/build/outputs/apk/**/*.apk
        retention-days: 30

  # Test job to ensure code quality
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Setup Java JDK
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: gradle

    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      with:
        api-level: 34
        build-tools: 34.0.0

    - name: Make Gradle Wrapper Executable
      run: chmod +x ./gradlew

    - name: Run Unit Tests
      run: ./gradlew testGenericDebugUnitTest

    - name: Run Lint Check
      run: ./gradlew lintGenericDebug

    - name: Upload Test Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: |
          app/build/reports/tests/
          app/build/reports/lint-results*.html
        retention-days: 14

  # Security and code quality analysis
  security-analysis:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Java JDK
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Gradle Dependencies
      uses: actions/cache@v4
      with:
        path: ~/.gradle/caches
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}

    - name: Make Gradle Wrapper Executable
      run: chmod +x ./gradlew

    - name: Run Security Analysis with Qodana
      uses: JetBrains/qodana-action@v2023.3
      env:
        QODANA_TOKEN: ${{ secrets.QODANA_TOKEN }}
      with:
        args: --baseline,qodana.sarif.json

    - name: Dependency Check
      run: |
        ./gradlew dependencyUpdates
        echo "Dependency check completed"

  # Release job (only on tag creation)
  release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [build, test]
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Java JDK
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: gradle

    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      with:
        api-level: 34
        build-tools: 34.0.0

    - name: Make Gradle Wrapper Executable
      run: chmod +x ./gradlew

    - name: Create Release Keystore (if secrets are provided)
      if: env.RELEASE_KEYSTORE != ''
      run: |
        echo "${{ secrets.RELEASE_KEYSTORE }}" | base64 -d > release.keystore
      env:
        RELEASE_KEYSTORE: ${{ secrets.RELEASE_KEYSTORE }}

    - name: Create local.properties for Release
      if: env.RELEASE_KEYSTORE != ''
      run: |
        echo "sdk.dir=$ANDROID_HOME" > local.properties
        echo "storeFile=../release.keystore" >> local.properties
        echo "storePassword=${{ secrets.KEYSTORE_PASSWORD }}" >> local.properties
        echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> local.properties
        echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> local.properties
      env:
        RELEASE_KEYSTORE: ${{ secrets.RELEASE_KEYSTORE }}

    - name: Build Release APKs
      run: |
        ./gradlew assembleGenericRelease
        ./gradlew assembleFossRelease

    - name: Sign APK (if keystore available)
      if: env.RELEASE_KEYSTORE != ''
      run: echo "APKs signed during build process"
      env:
        RELEASE_KEYSTORE: ${{ secrets.RELEASE_KEYSTORE }}

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          app/build/outputs/apk/generic/release/*.apk
          app/build/outputs/apk/foss/release/*.apk
        generate_release_notes: true
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
